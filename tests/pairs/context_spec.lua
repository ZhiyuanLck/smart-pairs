local Contex = require('pairs.context')
local t = require('pairs.test')
local api = vim.api

describe([[Test 'Contex:init':]], function()
  before_each(function()
    t.init_buf()
  end)

  after_each(function()
    api.nvim_buf_delete(0, {force = true})
  end)

  it("should set correct value of general member", function()
    t.set_buf('test', 0, 2)
    local ctx = Contex.new()
    assert.are.same(0, ctx.cur_line_idx)
    assert.are.same(2, ctx.cur_col_idx)
    assert.are.same('test', ctx.cur_line)
    assert.are.same('te', ctx.cur_left)
    assert.are.same('st', ctx.cur_right)
  end)

  it("should set correct value of general member [Chinese character]", function()
    -- strlen('【') = 3
    t.set_buf('【】', 0, 3)
    local ctx = Contex.new()
    assert.are.same(0, ctx.cur_line_idx)
    assert.are.same(3, ctx.cur_col_idx)
    assert.are.same('【】', ctx.cur_line)
    assert.are.same('【', ctx.cur_left)
    assert.are.same('】', ctx.cur_right)
  end)
end)

describe([[Test 'Contex.count_left':]], function()
  it("should get zero count", function()
    local text = '[text]'
    local ctn = Contex.count_left(text, '[', ']')
    assert.are.same(0, ctn.real)
    assert.are.same(0, ctn.valid)
    text = '【测试】'
    ctn = Contex.count_left(text, '【', '】')
    assert.are.same(0, ctn.real)
    assert.are.same(0, ctn.valid)
  end)

  it("should get positive count", function()
    local text = '[[text]'
    local ctn = Contex.count_left(text, '[', ']')
    assert.are.same(1, ctn.real)
    assert.are.same(1, ctn.valid)
    text = '【【测试】'
    ctn = Contex.count_left(text, '【', '】')
    assert.are.same(1, ctn.real)
    assert.are.same(1, ctn.valid)
  end)

  it("should get negative count", function()
    local text = '[text]]'
    local ctn = Contex.count_left(text, '[', ']')
    assert.are.same(-1, ctn.real)
    assert.are.same(0, ctn.valid)
    text = '【测试】】'
    ctn = Contex.count_left(text, '【', '】')
    assert.are.same(-1, ctn.real)
    assert.are.same(0, ctn.valid)
  end)

  it("should get continuous count", function()
    local ctn = Contex.count_left('', '[', ']')
    ctn = Contex.count_left('[', '[', ']', ctn)
    assert.are.same(1, ctn.real)
    assert.are.same(1, ctn.valid)
    ctn = Contex.count_left('text]', '[', ']', ctn)
    assert.are.same(0, ctn.real)
    assert.are.same(0, ctn.valid)
    ctn = Contex.count_left('text]', '[', ']', ctn)
    assert.are.same(-1, ctn.real)
    assert.are.same(0, ctn.valid)

    ctn = Contex.count_left('', '【', '】')
    ctn = Contex.count_left('【', '【', '】', ctn)
    assert.are.same(1, ctn.real)
    assert.are.same(1, ctn.valid)
    ctn = Contex.count_left('测试】', '【', '】', ctn)
    assert.are.same(0, ctn.real)
    assert.are.same(0, ctn.valid)
    ctn = Contex.count_left('测试】', '【', '】', ctn)
    assert.are.same(-1, ctn.real)
    assert.are.same(0, ctn.valid)
  end)
end)

describe([[Test 'Contex.count_right':]], function()
  it("should get zero count", function()
    local text = '[text]'
    local ctn = Contex.count_right(text, '[', ']')
    assert.are.same(0, ctn.real)
    assert.are.same(0, ctn.valid)
    text = '【测试】'
    ctn = Contex.count_right(text, '【', '】')
    assert.are.same(0, ctn.real)
    assert.are.same(0, ctn.valid)
  end)

  it("should get positive count", function()
    local text = '[text]]'
    local ctn = Contex.count_right(text, '[', ']')
    assert.are.same(1, ctn.real)
    assert.are.same(1, ctn.valid)
    text = '【测试】】'
    ctn = Contex.count_right(text, '【', '】')
    assert.are.same(1, ctn.real)
    assert.are.same(1, ctn.valid)
  end)

  it("should get negative count", function()
    local text = '[[text]'
    local ctn = Contex.count_right(text, '[', ']')
    assert.are.same(-1, ctn.real)
    assert.are.same(0, ctn.valid)
    text = '【【测试】'
    ctn = Contex.count_right(text, '【', '】')
    assert.are.same(-1, ctn.real)
    assert.are.same(0, ctn.valid)
  end)

  it("should get continuous count", function()
    local ctn = Contex.count_right('', '[', ']')
    ctn = Contex.count_right(']', '[', ']', ctn)
    assert.are.same(1, ctn.real)
    assert.are.same(1, ctn.valid)
    ctn = Contex.count_right('[text', '[', ']', ctn)
    assert.are.same(0, ctn.real)
    assert.are.same(0, ctn.valid)
    ctn = Contex.count_right('[text', '[', ']', ctn)
    assert.are.same(-1, ctn.real)
    assert.are.same(0, ctn.valid)

    ctn = Contex.count_right('', '【', '】')
    ctn = Contex.count_right('】', '【', '】', ctn)
    assert.are.same(1, ctn.real)
    assert.are.same(1, ctn.valid)
    ctn = Contex.count_right('【测试', '【', '】', ctn)
    assert.are.same(0, ctn.real)
    assert.are.same(0, ctn.valid)
    ctn = Contex.count_right('【测试', '【', '】', ctn)
    assert.are.same(-1, ctn.real)
    assert.are.same(0, ctn.valid)
  end)
end)

describe([[Test 'Contex.count_bracket':]], function()
  it("should get correct count of single char", function()
    assert.are.same(0, Contex.count_bracket('', '"'))
    assert.are.same(0, Contex.count_bracket('text', '"'))
    assert.are.same(2, Contex.count_bracket('"text"', '"'))
    assert.are.same(2, Contex.count_bracket('"测试"', '"'))
  end)

  it("should get correct count of multiple char", function()
    assert.are.same(0, Contex.count_bracket('', '""""'))
    assert.are.same(1, Contex.count_bracket('"""', '"""'))
    assert.are.same(1, Contex.count_bracket('""""', '"""'))
    assert.are.same(2, Contex.count_bracket('""""""', '"""'))
  end)
end)
